<h1>Accounts</h1>
<h3>Create a new account for a user:</h3>
<form onsubmit="createAccount(); return false;">
    <div class="form-group">
        <label for="createUserID">User ID</label>
        <input type="text" id="createUserID" name="createUserID" placeholder="User ID" class="form-control" required />
    </div>
    <button type="submit" class="btn btn-primary">Create Account</button>
</form>
<h3>Get an account's details:</h3>
<form onsubmit="searchAccount(); return false;">
    <div class="form-group">
        <label for="searchAccountID">Account ID</label>
        <input type="text" id="searchAccountID" name="searchAccountID" placeholder="Account ID" class="form-control" required />
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-sm-6">
                <label for="searchUserID">User ID</label>
                <input type="text" id="searchUserID" name="searchUserID" placeholder="User ID" class="form-control" readonly />
            </div>
            <div class="col-sm-6">
                <label for="searchBalance">Balance</label>
                <input type="text" id="searchBalance" name="searchBalance" placeholder="Balance" class="form-control" readonly />
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Get Details</button>
</form>
<h3>Do account deposit:</h3>
<form onsubmit="depositAccount(); return false;">
    <div class="form-group">
        <label for="depositAccountID">Account ID</label>
        <input type="text" id="depositAccountID" name="depositAccountID" placeholder="Account ID" class="form-control" required />
    </div>
    <div class="form-group">
        <label for="depositAmount">Amount</label>
        <input type="text" id="depositAmount" name="depositAmount" placeholder="Amount" class="form-control" required />
    </div>
    <button type="submit" class="btn btn-primary">Perform Deposit</button>
</form>
<h3>Do account withdrawal:</h3>
<form onsubmit="withdrawAccount(); return false;">
    <div class="form-group">
        <label for="withdrawAccountID">Account ID</label>
        <input type="text" id="withdrawAccountID" name="withdrawAccountID" placeholder="Account ID" class="form-control" required />
    </div>
    <div class="form-group">
        <label for="withdrawAmount">Amount</label>
        <input type="text" id="withdrawAmount" name="withdrawAmount" placeholder="Amount" class="form-control" required />
    </div>
    <button type="submit" class="btn btn-primary">Perform Withdrawal</button>
</form>
<h3>View a user's accounts:</h3>
<form onsubmit="getAccounts(); return false;">
    <div class="form-group">
        <label for="getUserID">User ID</label>
        <input type="text" id="getUserID" name="getUserID" placeholder="User ID" class="form-control" required />
    </div>
    <button type="submit" class="btn btn-primary">Get Accounts</button>
</form>
<table class="table">
    <thead>
        <tr>
            <th scope="col">ID</th>
            <th scope="col">User ID</th>
            <th scope="col">Balance</th>
        </tr>
    </thead>
    <tbody id="tableBody">
        <!-- Rows of account data are inserted programmatically -->
    </tbody>
</table>

<script>
    function createAccount() {
        const id = parseInt($('#createUserID').val());
        // Only send the request if the specified ID is a number
        if (!isNaN(id) && id >= 0) {
            $.ajax({
                url: '/api/bank/account/create/' + id,
                type: 'GET',
                contentType: 'application/json',
                processData: false,
                success: function (data, textStatus, jqXHR) {
                    // Display alert message to indicate account creation
                    var message = "Account created successfully:\n";
                    message += "User ID: " + data.userID + "\n"
                    message += "Account ID: " + data.accountID + "\n";
                    message += "Starting balance: " + data.balance;
                    window.alert(message);
                },
                error: function (response) {
                    window.alert("Failed to create account: " + response.responseText);
                }
            });
        } else {
            window.alert("Failed to search for account: Specified ID must be a positive number");
        }
    }

    function searchAccount() {
        const id = parseInt($('#searchAccountID').val());
        // Only send the request if the specified ID is a number
        if (!isNaN(id) && id >= 0) {
            $.ajax({
                url: '/api/bank/account/' + id,
                type: 'GET',
                contentType: 'application/json',
                processData: false,
                success: function (data, textStatus, jqXHR) {
                    // Inject account details into text fields
                    var obj = data;
                    $('#searchUserID').val(obj.userID);
                    $('#searchBalance').val(obj.balance);
                },
                error: function (response) {
                    window.alert("Failed to search for account: " + response.responseText);
                }
            });
        } else {
            window.alert("Failed to search for account: Specified ID must be a positive number");
        }
    }

    function depositAccount() {
        const id = parseInt($('#depositAccountID').val());
        const amount = parseInt($('#depositAmount').val());
        // Only send the request if the specified ID and amount is a number
        if (!isNaN(id) && id >= 0 && !isNaN(amount) && amount >= 0) {
            $.ajax({
                url: '/api/bank/account/' + id + '/deposit',
                type: 'POST',
                contentType: 'application/json',
                processData: false,
                data: JSON.stringify(amount),
                success: function (data, textStatus, jqXHR) {
                    // Display alert message to indicate successful deposit
                    var message = "Deposited into account successfully:\n";
                    message += "User ID: " + data.userID + "\n"
                    message += "Account ID: " + data.accountID + "\n";
                    message += "Current balance: " + data.balance;
                    window.alert(message);
                },
                error: function (response) {
                    window.alert("Failed to perform deposit: " + response.responseText);
                }
            });
        } else {
            window.alert("Failed to perform deposit: Specified ID and amount must be a positive number");
        }
    }

    function withdrawAccount() {
        const id = parseInt($('#withdrawAccountID').val());
        const amount = parseInt($('#withdrawAmount').val());
        // Only send the request if the specified ID and amount is a number
        if (!isNaN(id) && id >= 0 && !isNaN(amount) && amount >= 0) {
            $.ajax({
                url: '/api/bank/account/' + id + '/withdraw',
                type: 'POST',
                contentType: 'application/json',
                processData: false,
                data: JSON.stringify(amount),
                success: function (data, textStatus, jqXHR) {
                    // Display alert message to indicate successful deposit
                    var message = "Deposited into account successfully:\n";
                    message += "User ID: " + data.userID + "\n"
                    message += "Account ID: " + data.accountID + "\n";
                    message += "Current balance: " + data.balance;
                    window.alert(message);
                },
                error: function (response) {
                    window.alert("Failed to perform withdrawal: " + response.responseText);
                }
            });
        } else {
            window.alert("Failed to perform withdrawal: Specified ID and amount must be a positive number");
        }
    }

    function getAccounts() {
        // Delete old rows within the table
        deleteAccountRows();
        const id = parseInt($('#getUserID').val(), 10);
        // Only send the request if the specified ID is a number
        if (!isNaN(id) && id >= 0) {
            $.ajax({
                url: '/api/bank/user/' + id + '/accounts',
                type: 'GET',
                contentType: 'application/json',
                processData: false,
                success: function (data, textStatus, jqXHR) {
                    data.forEach(function (account) {
                        // For each account, insert a row in the table with the account details
                        addAccountRow(account.accountID, account.userID, account.balance);
                    });
                },
                error: function (response) {
                    window.alert("Failed to fetch user's accounts: " + response.responseText);
                }
            });
        } else {
            window.alert("Failed to fetch user's accounts: Specified ID must be a positive number");
        }
    }

    function addAccountRow(accountID, userID, balance) {
        const tbody = document.getElementById("tableBody");
        // Insert row at the end of table body
        var newRow = tbody.insertRow();
        // Insert account data into row
        var accountIDCell = newRow.insertCell();
        accountIDCell.appendChild(document.createTextNode(accountID));
        var userIDCell = newRow.insertCell();
        userIDCell.appendChild(document.createTextNode(userID));
        var balanceCell = newRow.insertCell();
        balanceCell.appendChild(document.createTextNode(balance));
    }

    function deleteAccountRows() {
        // Delete all rows from the table
        $("#tableBody tr").remove();
    }
</script>